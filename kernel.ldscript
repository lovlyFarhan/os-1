/* Script for -z combreloc: combine and sort reloc sections */
OUTPUT_FORMAT("elf32-littlearm", "elf32-bigarm",
	      "elf32-littlearm")
OUTPUT_ARCH(arm)
ENTRY(_start)
SEARCH_DIR("/opt/local/arm-none-eabi/lib");
SECTIONS
{
    __KernelStart = 2 * 1024 * 1024 * 1024;
    __PhysicalRamSize = 128 * 1024 * 1024;

    . = 0x0;

    .early.text :
        {
        kernel/early-*.o(.text.early.vector)
        kernel/early-*.o(.text)
        }

    .early.data :
        {
        kernel/early-*.o(.data .data.*)
        kernel/early-*.o(.bss .bss.*)
        }

    /* Dummy section */
    .dummy :
        {
        }

    /*
    We're going to mess with the normal VMA assignment sequence by manually
    placing the '.vector' section's run address. This variable saves where the
    VMA counter lived before the assignment. We'll need to return to it in a
    moment.
    */
    __vma_before_vector = .;

    /* Hop forward in VMA to the ARM high vector table address */
    .vector 0xffff0000 :
        AT(ALIGN(LOADADDR(.dummy), CONSTANT(COMMONPAGESIZE)))
        {
            __VectorStartPhysical = LOADADDR(.vector);
            *(.text.vector)
        }

    /* '__begin_high' will be the first LMA of code addressable in high memory */
    . = ALIGN(__vma_before_vector + SIZEOF(.vector), CONSTANT(COMMONPAGESIZE));
    __begin_high = .;

    /* Hop backward to regular high-memory VMA's */
    .text (__begin_high + __KernelStart) :
        AT(__begin_high)
        {
            *(.text .text.*)
        }

    .data :
        ALIGN(CONSTANT(MAXPAGESIZE))
        {
            *(.data .data.*)
            *(.rodata .rodata.*)
        }

    .init_array :
        {
        PROVIDE_HIDDEN(__init_array_start = .);
        KEEP (*(SORT(.init_array.*)))
        KEEP (*(.init_array))
        PROVIDE_HIDDEN (__init_array_end = .);
        }

    .bss :
        ALIGN(CONSTANT(MAXPAGESIZE))
        {
            *(.bss .bss.*)
        }

    .ARM.extab :
        {
        *(.ARM.extab* .gnu.linkonce.armextab.*)
        }

    PROVIDE_HIDDEN(__exidx_start = .);
    .ARM.exidx :
        {
        *(.ARM.exidx* .gnu.linkonce.armexidx.*)
        }
    PROVIDE_HIDDEN(__exidx_end = .);

    PROVIDE (end = .);

    __HeapStart = ALIGN(CONSTANT(MAXPAGESIZE));
    __RamEnd = __KernelStart + __PhysicalRamSize;
}
